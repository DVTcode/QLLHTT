package handlers

import (
	"net/http"

	"QLLHTT/internal/config"
	"QLLHTT/internal/models"
	"QLLHTT/internal/utils"

	"github.com/gin-gonic/gin"
)

// ========================== TEACHER ==========================

func CreateCourse(c *gin.Context) {
	user, _ := utils.GetCurrentUser(c)
	var input models.Course
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "invalid input"})
		return
	}
	input.TeacherID = user.ID
	if err := config.DB.Create(&input).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "failed to create course"})
		return
	}
	c.JSON(http.StatusOK, input)
}

func UpdateCourse(c *gin.Context) {
	id := c.Param("id")
	var input models.Course
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "invalid input"})
		return
	}
	if err := config.DB.Model(&models.Course{}).Where("id = ?", id).Updates(input).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "failed to update"})
		return
	}
	c.JSON(http.StatusOK, gin.H{"message": "updated"})
}

func DeleteCourse(c *gin.Context) {
	id := c.Param("id")

	var course models.Course

	// üîí L·∫•y user_id t·ª´ token
	teacherID, ok := c.Get("user_id")
	if !ok {
		c.JSON(http.StatusUnauthorized, gin.H{"error": "Unauthorized"})
		return
	}

	// üîç T√¨m course theo ID v√† teacherID
	if err := config.DB.Where("id = ? AND teacher_id = ?", id, teacherID).First(&course).Error; err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "Course not found or unauthorized"})
		return
	}

	// ‚ùå Soft delete (n·∫øu d√πng gorm.Model)
	if err := config.DB.Delete(&course).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to delete"})
		return
	}

	c.JSON(http.StatusOK, gin.H{"message": "Course deleted successfully"})
}

// ‚úÖ Filter courses based on query parameters
func FilterCourses(c *gin.Context) {
	// L·∫•y tham s·ªë t·ª´ query parameters
	title := c.DefaultQuery("title", "")          // L·ªçc theo ti√™u ƒë·ªÅ kh√≥a h·ªçc
	teacherID := c.DefaultQuery("teacher_id", "") // L·ªçc theo ID c·ªßa gi·∫£ng vi√™n (n·∫øu c√≥)

	var courses []models.Course

	// L·ªçc theo ti√™u ch√≠
	query := config.DB.Model(&models.Course{})

	// N·∫øu c√≥ ti√™u ƒë·ªÅ, l·ªçc theo ti√™u ƒë·ªÅ
	if title != "" {
		query = query.Where("title LIKE ?", "%"+title+"%")
	}

	// N·∫øu c√≥ teacher_id, l·ªçc theo gi·∫£ng vi√™n
	if teacherID != "" {
		query = query.Where("teacher_id = ?", teacherID)
	}

	// Th·ª±c hi·ªán truy v·∫•n v√† tr·∫£ v·ªÅ k·∫øt qu·∫£
	if err := query.Find(&courses).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to fetch courses"})
		return
	}

	// Tr·∫£ v·ªÅ danh s√°ch c√°c kh√≥a h·ªçc
	c.JSON(http.StatusOK, gin.H{"courses": courses})
}

func UploadMaterial(c *gin.Context) {
	var input models.Document
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "invalid input"})
		return
	}
	if err := config.DB.Create(&input).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "failed to upload"})
		return
	}
	c.JSON(http.StatusOK, input)
}

func UpdateMaterial(c *gin.Context) {
	id := c.Param("id")
	var input models.Document
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "invalid input"})
		return
	}
	if err := config.DB.Model(&models.Document{}).Where("id = ?", id).Updates(input).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "failed to update material"})
		return
	}
	c.JSON(http.StatusOK, gin.H{"message": "material updated"})
}

func DeleteMaterial(c *gin.Context) {
	id := c.Param("id")
	if err := config.DB.Delete(&models.Document{}, id).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "failed to delete material"})
		return
	}
	c.JSON(http.StatusOK, gin.H{"message": "material deleted"})
}
